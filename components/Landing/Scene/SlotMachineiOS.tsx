"use client";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, forwardRef, useState, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import * as THREE from "three";
import { useThree } from "@react-three/fiber";
import { useVideoTexture } from "@react-three/drei";

type GLTFResult = GLTF & {
  nodes: {
    Sphere014: THREE.Mesh;
    Sphere015: THREE.Mesh;
    Sphere018: THREE.Mesh;
    Sphere010: THREE.Mesh;
    Sphere011: THREE.Mesh;
    Sphere013: THREE.Mesh;
    Sphere019: THREE.Mesh;
    Sphere008: THREE.Mesh;
    Sphere009: THREE.Mesh;
    Sphere012: THREE.Mesh;
  };
  materials: {
    Buttons: THREE.MeshStandardMaterial;
    ["export"]: THREE.MeshBasicMaterial;
    ["Material.001"]: THREE.MeshStandardMaterial;
  };
};

interface Props {
  video: string;
  setIs3dLoaded: (value: boolean) => void;
  iframeClick: () => void;
  setCamera: (value: any) => void;
  isVideoFocused: boolean;
}

export const SlotMachineiOS = forwardRef(function SlotMachine2(
  {
    video,
    setIs3dLoaded,
    iframeClick,
    setCamera,
    isVideoFocused,
    ...props
  }: Props,
  ref: any
) {
  const { nodes, materials } = useGLTF("/Models/uSlotM.glb") as GLTFResult;

  const videoMesh: any = useRef(null);

  const { camera } = useThree();

  const texture = useVideoTexture(video);

  useEffect(() => {
    if (videoMesh.current) {
      const material = new THREE.MeshBasicMaterial();
      material.map = texture;
      videoMesh.current.material = material;
    }

    setIs3dLoaded(true);
    setCamera(camera);
  }, []);

  // const { position } = useControls({
  //   position: [0, 0, 0],
  // });

  return (
    <>
      <group ref={ref} dispose={null}>
        <group rotation={[-Math.PI, 0.009, -Math.PI]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Sphere014.geometry}
            material={materials.Buttons}
            position={[-0.005, 0.734, -0.084]}
            rotation={[Math.PI, -0.009, Math.PI]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Sphere015.geometry}
            material={materials.Buttons}
            position={[-0.005, 0.734, -0.084]}
            rotation={[Math.PI, -0.009, Math.PI]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Sphere018.geometry}
            material={materials.Buttons}
            position={[-0.005, 0.734, -0.084]}
            rotation={[Math.PI, -0.009, Math.PI]}
          />
        </group>
        <group rotation={[-Math.PI, 0.009, -Math.PI]}>
          <group
            position={[0.001, 1.019, 0.1]}
            rotation={[1.241, -0.006, -0.008]}
          >
            <group position={[-0.273, 0, 0]}>
              <mesh
                castShadow
                receiveShadow
                geometry={nodes.Sphere010.geometry}
                material={materials["export"]}
                rotation={[1.901, -0.003, 3.133]}
              />
              <mesh
                castShadow
                receiveShadow
                geometry={nodes.Sphere011.geometry}
                material={materials["export"]}
                position={[0.365, 0.001, -0.001]}
                rotation={[1.901, -0.003, 3.133]}
              />
              <mesh
                castShadow
                receiveShadow
                geometry={nodes.Sphere013.geometry}
                material={materials["export"]}
                position={[0.545, 0, 0]}
                rotation={[1.901, -0.003, 3.133]}
              />
              <mesh
                castShadow
                receiveShadow
                geometry={nodes.Sphere019.geometry}
                material={materials["export"]}
                position={[0.185, 0.003, -0.003]}
                rotation={[1.901, -0.003, 3.133]}
              />
            </group>
          </group>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Sphere008.geometry}
            material={materials["export"]}
            position={[-0.005, 0.734, -0.084]}
            rotation={[Math.PI, -0.009, Math.PI]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Sphere009.geometry}
            material={materials["Material.001"]}
            ref={videoMesh}
            position={[-0.001, 0.488, 0.092]}
            rotation={[Math.PI, -0.009, Math.PI]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Sphere012.geometry}
            material={materials["export"]}
            position={[0.577, -0.147, -0.155]}
            rotation={[Math.PI, -0.009, Math.PI]}
          />
        </group>
      </group>
    </>
  );
});

useGLTF.preload("/Models/uSlotM.glb");
